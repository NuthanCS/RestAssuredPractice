package formAuthentication;

import io.restassured.RestAssured;
import io.restassured.authentication.FormAuthConfig;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.session.SessionFilter;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static io.restassured.RestAssured.given;
import static io.restassured.RestAssured.with;
import static org.hamcrest.Matchers.equalTo;

public class FormAuthenticate {

    @BeforeClass
    public void execute() {
        RestAssured.requestSpecification = new RequestSpecBuilder().
                setRelaxedHTTPSValidation().
                setBaseUri("https://localhost:8443/").build();
    }

    @Test
    public void form_based_authentication_using_csrfToken() {

        given().auth().form("dan", "dan123",
                        //this will make sign in request internally by Rest Assured which is Post request
                        new FormAuthConfig("/signin", "txtUsername", "txtPassword")).
                log().all().
                when().
                //before sign in we need to make get request for login so that it will use html form to make sign in request which is mentioned above
                        get("/login").
                then().log().all().
                assertThat().
                statusCode(200);
    }

    @Test
    public void fetch_sessionId_using_sessionFilters() {
        //If the SessionId name is default i.e JSESSIONID, below code will work. If not we will have to specify explicitly

        //SESSION ID will be generated by the server and sent to the client and it is used as Request Header for login request
        // and then Session ID will be generated as a part of sign in request

        //with the session filter class we can extract the session ID from the response header
        SessionFilter filter = new SessionFilter();

        given().auth().form("dan", "dan123",

                        //this will make sign in request internally by Rest Assured which is Post request
                        new FormAuthConfig("/signin", "txtUsername", "txtPassword")).

                //with the help of above call we will get session ID as a part of response headers and store it in filter object
                        filter(filter).
                log().all().
                when().
                //before sign in we need to make get request for login so that it will use html form to make sign in request which is mentioned above
                        get("/login").
                then().log().all().
                assertThat().
                statusCode(200);

        System.out.println("Session Id is : " + filter.getSessionId());
    }

    @Test
    public void getProfile() {

        SessionFilter filter = new SessionFilter();

        given().auth().form("dan", "dan123",
                        new FormAuthConfig("/signin", "txtUsername", "txtPassword").

                                ////we need to send csrf token in the above request in order to make subsequent request work properly
                                withAdditionalField("_csrf")).
                filter(filter).
                log().all().
                when().
                get("/login").
                then().
                log().all().
                assertThat().
                statusCode(200);

        given().
                //we need to pass session id of the above request for the below request because session Id is stored as a part of previous request that authenticates the user
                // so session id will be passed as part of the request header
                sessionId(filter.getSessionId()).
                log().all().
                when().
                get("/profile/index").
                then().
                log().all().
                assertThat().
                statusCode(200);
    }

    @Test
    public void validateHTML() {

        SessionFilter filter = new SessionFilter();

        given().
                auth().form("dan", "dan123",
                        new FormAuthConfig("/signin", "txtUsername", "txtPassword").
                                withAdditionalField("_csrf")).
                filter(filter).
                log().all().
                when().
                get("/login").
                then().
                log().all().
                assertThat().
                statusCode(200);

        given().
                //we are retrieving the Session ID from the previous request and passing it to the current subsequent requests
                sessionId(filter.getSessionId()).
                log().all().
                when().
                get("/profile/index").
                then().
                log().all().
                assertThat().
                statusCode(200).body("html.body.div.p", equalTo("This is User Profile\\Index. Only authenticated people can see this"));
    }
}

//With this we have automated the Web Application that uses form authentication and that maintains user session
